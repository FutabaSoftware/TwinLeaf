using System;
using System.IO;
using System.IO.Pipes;
using System.Security.Principal;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using System.Windows;
using Microsoft.Web.WebView2.Core;

namespace TwinLeaf;

public partial class App : Application
{
    public static string Profile = "default";
    public static string BaseDir = Path.Combine(
        Environment.GetFolderPath(Environment.SpecialFolder.LocalApplicationData), "TwinLeaf");
    public static string LogPath => Path.Combine(BaseDir, "run.log");
    public static CoreWebView2Environment? WebEnv;
    public static string? StartupUrl;

    // 単一インスタンス制御
    private static Mutex? _singleMutex;
    private static readonly string _userSid = WindowsIdentity.GetCurrent().User?.Value ?? "nouser";
    private static string MutexName => $"TwinLeaf_Mutex_{_userSid}";
    private static string PipeName  => $"TwinLeaf_Pipe_{_userSid}";

    public static MainWindow? MainWin;

    protected override void OnStartup(StartupEventArgs e)
    {
        Directory.CreateDirectory(BaseDir);
        Log($"=== start {DateTime.Now:yyyy-MM-dd HH:mm:ss} ===");
        Log($"args : {string.Join(' ', e.Args)}");
        Log($".NET : {Environment.Version}  OS:{Environment.OSVersion}  64bit:{Environment.Is64BitOperatingSystem}");

        // 引数処理
        for (int i = 0; i < e.Args.Length; i++)
        {
            var a = e.Args[i];
            if (a == "--profile" && i + 1 < e.Args.Length) Profile = e.Args[++i];
            else if (a == "--url" && i + 1 < e.Args.Length) StartupUrl = e.Args[++i];
        }

        // 単一インスタンス: Mutex
        bool createdNew;
        _singleMutex = new Mutex(true, MutexName, out createdNew);
        if (!createdNew)
        {
            // 2回目以降: 既存インスタンスへハンドオフして即終了
            try
            {
                string? url = ExtractUrlFromArgs(e.Args);
                SendToPrimary(url);
            }
            catch (Exception ex) { Log("Handoff ERR: " + ex); }
            Environment.Exit(0);
            return;
        }

        // WebView2 環境
        string userDataFolder = Path.Combine(BaseDir, Profile, "WebView2");
        Directory.CreateDirectory(userDataFolder);
        Log($"UserDataFolder: {userDataFolder}");

        try
        {
            var opts = new CoreWebView2EnvironmentOptions();
            WebEnv = CoreWebView2Environment
                .CreateAsync(null, userDataFolder, opts).GetAwaiter().GetResult();
            Log("CreateEnvironment ok");
        }
        catch (Exception ex) { Log("CreateEnvironment ERR: " + ex); }

        base.OnStartup(e);

        var win = new MainWindow();
        MainWin = win;
        Log("MainWindow.Show()");
        win.Show();

        // 1回目インスタンス: Pipeサーバ起動
        StartPipeServer();

        // 初回URLがあれば遷移
        if (!string.IsNullOrWhiteSpace(StartupUrl))
        {
            try { MainWin?.NavigateFromExternal(StartupUrl!); } catch { }
        }
    }

    protected override void OnExit(ExitEventArgs e)
    {
        Log($"=== exit {DateTime.Now:yyyy-MM-dd HH:mm:ss} ===");
        _singleMutex?.ReleaseMutex();
        _singleMutex?.Dispose();
        base.OnExit(e);
    }

    public static void Log(string msg)
    {
        try { File.AppendAllText(LogPath, msg + Environment.NewLine); } catch { }
    }

    private static string? ExtractUrlFromArgs(string[] args)
    {
        for (int i = 0; i < args.Length; i++)
        {
            var a = args[i];
            if (a == "--url" && i + 1 < args.Length) return args[i + 1];
            if (LooksLikeUrl(a)) return a;
        }
        return null;
    }

    private static bool LooksLikeUrl(string s)
    {
        if (string.IsNullOrWhiteSpace(s)) return false;
        if (s.Contains(" ")) return false;
        return s.Contains("://") || s.Contains('.') || s.StartsWith("about:", StringComparison.OrdinalIgnoreCase);
    }

    private static void SendToPrimary(string? payload)
    {
        using var client = new NamedPipeClientStream(".", PipeName, PipeDirection.Out, PipeOptions.Asynchronous);
        client.Connect(1000); // 1s
        using var w = new StreamWriter(client, new UTF8Encoding(false)) { AutoFlush = true };
        w.WriteLine(payload ?? "");
    }

    private static void StartPipeServer()
    {
        Task.Run(async () =>
        {
            while (true)
            {
                try
                {
                    using var server = new NamedPipeServerStream(PipeName, PipeDirection.In, 1,
                        PipeTransmissionMode.Byte, PipeOptions.Asynchronous);
                    await server.WaitForConnectionAsync();
                    using var r = new StreamReader(server, Encoding.UTF8);
                    var line = await r.ReadLineAsync();

                    Current?.Dispatcher.Invoke(() =>
                    {
                        try
                        {
                            if (MainWin != null)
                            {
                                MainWin.BringToFront();
                                if (!string.IsNullOrWhiteSpace(line))
                                    MainWin.NavigateFromExternal(line!);
                            }
                        }
                        catch (Exception ex) { Log("Pipe dispatch ERR: " + ex); }
                    });
                }
                catch (Exception ex)
                {
                    Log("Pipe server ERR: " + ex);
                    await Task.Delay(500);
                }
            }
        });
    }
}
